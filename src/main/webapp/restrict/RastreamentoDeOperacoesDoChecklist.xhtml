<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets"
		xmlns="http://www.w3.org/1999/xhtml"
		xmlns:f="http://java.sun.com/jsf/core"
		xmlns:h="http://java.sun.com/jsf/html"
		xmlns:p="http://primefaces.org/ui"
		template="layout.xhtml">
		
	<ui:define name="tarefas">
		<p:growl id="msg1" showDetail="true"/>
		<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"/>
		<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"/>
		<script type="text/javascript">
//<![CDATA[
            

var mainMap;

var markersDosCheckListsPrevistos;
var markersDosCheckListsRealizados;

var arrayDeCheckListsPrevistos;
var arrayDeCheckListsRealizados;

var directionsDisplay;
var directionsService = new google.maps.DirectionsService();

var primeiraLatitudeLongitudePrincipal;
var ultimaLatitudeLongitudePrincipal;


var infoWindowSingleton = new google.maps.InfoWindow();

var rota;
var pontoInicio;
var pontoFinal;
var Operacao = {
		rota: undefined,
		pontoInicio: undefined,
		pontoFinal: undefined	
}
//]]>
	</script>
		
		<h:form id="formDaMensagem">
		
			<!-- mensagem de que não existem checklists previstos --> 
			<p:remoteCommand 	name="naoExistemChecklistsPrevistos" 
								actionListener="#{rastreamentoDeOperacoesDoChecklist.mostraMensagemDeQueNaoExistemCheckListsPrevistos}" 
								update="mensagens"/>
								
			<!-- mensagem de que não existem checklists realizados --> 
			<p:remoteCommand 	name="naoExistemChecklistsRealizados" 
								actionListener="#{rastreamentoDeOperacoesDoChecklist.mostraMensagemDeQueNaoExistemCheckListsRealizados}" 
								update="mensagens"/>
								
			<!-- mensagem de que não existe rota para checklists realizados --> 
			<p:remoteCommand 	name="naoExisteRotaParaChecklistsRealizados" 
								actionListener="#{rastreamentoDeOperacoesDoChecklist.mostraMensagemDeQueNaoExisteRotaParaCheckListsRealizados}" 
								update="mensagens"/>
								
			<!-- mensagem de que não existe latitude/longitude nem no checklist e nem no evento --> 
			<p:remoteCommand 	name="oEventoSelecionadoNaoPossuiLatitudeLongitude" 
								actionListener="#{rastreamentoDeOperacoesDoChecklist.mostraMensagemDeLatitudeLongitudeNulaNoEvento}" 
								update="mensagens"/>
																
			<p:growl id="mensagens" />
			
		</h:form>

		<h:form prependId="false" id="formMapa">
			
			<h:inputHidden id="primeiraLatitudeDoCheckList" value="#{rastreamentoDeOperacoesDoChecklist.localDaPrimeiraOperacaoDoCheckList.latitude}"/>
			<h:inputHidden id="primeiraLongitudeDoCheckList" value="#{rastreamentoDeOperacoesDoChecklist.localDaPrimeiraOperacaoDoCheckList.longitude}"/>
			
			<h:inputHidden id="ultimaLatitudeDoCheckList" value="#{rastreamentoDeOperacoesDoChecklist.localDaUltimaOperacaoDoCheckList.latitude}"/>
			<h:inputHidden id="ultimaLongitudeDoCheckList" value="#{rastreamentoDeOperacoesDoChecklist.localDaUltimaOperacaoDoCheckList.longitude}"/>
			
			<!-- checklists previstos --> 
			<p:remoteCommand name="getChecklistsPrevistos" update=":formMapa:checklistsPrevistos" resetValues="true"/>
			<h:inputHidden id="checklistsPrevistos" value="#{rastreamentoDeOperacoesDoChecklist.checklistsPrevistos}"/>
			
			<!-- checklists realizados --> 
			<p:remoteCommand name="getChecklistsRealizados" update=":formMapa:checklistsRealizados" resetValues="true"/>
			<h:inputHidden id="checklistsRealizados" value="#{rastreamentoDeOperacoesDoChecklist.checklistsRealizados}"/>
			
			<!-- coordenadas dos checklists realizados --> 
			<p:remoteCommand name="getCoordenadasDosChecklistsRealizados" update=":formMapa:coordenadasDosChecklistsRealizados" resetValues="true"/>
			<h:inputHidden id="coordenadasDosChecklistsRealizados" value="#{rastreamentoDeOperacoesDoChecklist.coordenadasDosChecklistsRealizados}"/>
			
			<!-- verifica se existe latitude/longitude no checklist e no evento -->
			<p:remoteCommand name="getEventoSelecionadoPossuiLatitudeLongitude" update=":formMapa:eventoSelecionadoPossuiLatitudeLongitude" resetValues="true"/>
			<h:inputHidden id="eventoSelecionadoPossuiLatitudeLongitude" value="#{rastreamentoDeOperacoesDoChecklist.eventoSelecionadoPossuiLatitudeLongitude}"/> 
					
			
			<div class="estiloDiv">
				<p:panel id="pnlButtons">
				
					<p:selectBooleanButton onLabel="#{i18n['label.provided_checklists']}" offLabel="#{i18n['label.provided_checklists']}"
							onIcon="ui-icon-check" offIcon="ui-icon-close" onchange="showChecklistsPrevistos(this);" />
					&nbsp;		
					<p:selectBooleanButton onLabel="#{i18n['label.realized_checklists']}" offLabel="#{i18n['label.realized_checklists']}"
							onIcon="ui-icon-check" offIcon="ui-icon-close" onchange="showChecklistsRealizados(this);" />
					&nbsp;
					<p:selectBooleanButton onLabel="#{i18n['label.traced_route']}" offLabel="#{i18n['label.traced_route']}"
							onIcon="ui-icon-check" offIcon="ui-icon-close" onchange="showRotaDasOperacoes(this);" />
							
				</p:panel>
			
					<div id="map-canvas" style="width:100%;height:90%;position:absolute;"></div>			
			</div>
		</h:form>
		
		<h:form prependId="false">
			<p:panel id="informacoesRota" header="Informações da rota"
				toggleable="true" toggleSpeed="500" widgetVar="panel"
				style="z-index: 0; position: absolute; bottom: 11px; right: 0px; margin: 10px;">
				<h:panelGrid columns="2" width="230" style="font-size: 13px;">
	
					<h:outputLabel value="Distância: " style="font-weight: bold;" />
					<h:outputText id="distancia" />
	
					<h:outputLabel value="Duração: " style="font-weight: bold;" />
					<h:outputText id="duracao" />
	
					<h:outputLabel value="Hora início: " style="font-weight: bold;" />
					<h:outputText id="inicio_info" />
	
					<h:outputLabel value="Hora fim: " style="font-weight: bold;" />
					<h:outputText id="fim_info" />
				</h:panelGrid>
			</p:panel>
		</h:form>
		
		<script type="text/javascript">
//<![CDATA[

function initialize() {
	
	primeiraLatitudeLongitudePrincipal = new google.maps.LatLng(
			document.getElementById('primeiraLatitudeDoCheckList').value,
			document.getElementById('primeiraLongitudeDoCheckList').value);
	
	ultimaLatitudeLongitudePrincipal = new google.maps.LatLng(
			document.getElementById('ultimaLatitudeDoCheckList').value,
			document.getElementById('ultimaLongitudeDoCheckList').value);
	
	// Monta o mapa:
	var centroDoMapa = new google.maps.LatLng(
			document.getElementById('primeiraLatitudeDoCheckList').value,
			document.getElementById('primeiraLongitudeDoCheckList').value);
					
	var mapOptions = {
			zoom: 17,
			mapTypeId: google.maps.MapTypeId.HYBRID,
			center: centroDoMapa,
			disableDefaultUI: true,
            panControl: false
			};
	mainMap = new google.maps.Map(
			document.getElementById('map-canvas'),
			mapOptions);

	// Adiciona div como legenda no mapa
	mainMap.controls[google.maps.ControlPosition.RIGHT_BOTTOM]
			.push(document.getElementById('informacoesRota'));

	directionsDisplay = new google.maps.DirectionsRenderer();
	
	// Markers dos Checklists:
	markersDosCheckListsPrevistos = new MarkerClusterer(mainMap);
	markersDosCheckListsRealizados = new MarkerClusterer(mainMap);

	Operacao.rota = new google.maps.Polyline({
		strokeColor : '#ff0000',
		strokeOpacity : 3.0,
		strokeWeight : 4,
		geodesic : true,
		map : mainMap
	});

	Operacao.pontoInicio = new google.maps.Marker({
		map : mainMap,
		icon : '/nicBrain/resources/images/maps/letter_a.png'
	});

	Operacao.pontoFinal = new google.maps.Marker({
		map : mainMap,
		icon : '/nicBrain/resources/images/maps/letter_b.png'
	});
}

/**
 * Exibe/Oculta os markers de CheckLists Previstos.
 *
 * chk: Componente checkbox que indica se deve-se exibir ou ocultar as 
 * ocorrencias.
 */
function showChecklistsPrevistos(chk) {
	
	getChecklistsPrevistos();
	
	if (chk.checked) {
		
		arrayDeCheckListsPrevistos = new Array();
		var markersData = document.getElementById("checklistsPrevistos").value.split(",");
				
		for (var i = 0; i < markersData.length; i++) {
			
			// FIXME: Não pode mudar (ainda) a ordem das variáveis:
			var _title = markersData[i++];
			var nomeDaAtividade = markersData[i++];
			var _lat = markersData[i++];
			var _lng = markersData[i++];
			var nomeDoEvento = markersData[i++];
			var nomeDoCheckList = markersData[i++];
			var nomeDoStatus = markersData[i++];
			var nomeDoUsuario = markersData[i++];
			var dataHora = markersData[i++];
			
			// FIXME: Trocar os Propertys de Menu pelos Propertys de Label 
			
			if( ! (_lat == null || _lat == 'undefined' || _lat == 'null') ) {
				if( ! (_lng == null || _lng == 'undefined' || _lng == 'null') ) {
			
					// FIXME: Trocar os Propertys de Menu pelos Propertys de Label
					
					var _infoWindowContent = "<div>"
						+ "<h1>" + "#{i18n['label.details']}" + "</h1>"
						+ "<div>"
						+ "<p>"
						+ "<b>#{i18n['label.activity']}:</b>&nbsp;" + nomeDaAtividade + "</br>"
						+ "<b>#{i18n['menu.evento']}:</b>&nbsp;" + nomeDoEvento + "</br>"
						+ "<b>#{i18n['menu.checklist']}:</b>&nbsp;" + nomeDoCheckList + "</br>"
						+ "<b>#{i18n['menu.status']}:</b>&nbsp;" + nomeDoStatus + "</br>"
						+ "<b>#{i18n['menu.usuario']}:</b>&nbsp;" + nomeDoUsuario + "</br>"
						+ "<b>#{i18n['label.date_time']}:</b>&nbsp;" + dataHora + "</br>"
						+ "</p>"
						+ "</br>"
						+ "</div>"
						+ "</div>";
						
					var markerDeCheckListPrevisto = new google.maps.Marker({
						draggable: false,
						title: _title,
						icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
						animation: google.maps.Animation.DROP,
						html: _infoWindowContent,
						position: new google.maps.LatLng(
								_lat,
								_lng)
					});
								
					arrayDeCheckListsPrevistos.push(markerDeCheckListPrevisto);
					
					// Monta o InfoWindow:
					google.maps.event.addListener(markerDeCheckListPrevisto, 'click', function() {
						infoWindowSingleton.setContent(this.html);
						infoWindowSingleton.open(mainMap, this);
					});
				
				}
			}
			
		}

		if (arrayDeCheckListsPrevistos.length <= 0){
			
			//Click no botão para não Aparecer o Simbolo de que ele foi clicado
			chk.click();
			naoExistemChecklistsPrevistos();
			
		} else {
		
			var request = {
				    origin: primeiraLatitudeLongitudePrincipal,
				    destination: ultimaLatitudeLongitudePrincipal
				 };
						 
			markersDosCheckListsPrevistos.addMarkers(arrayDeCheckListsPrevistos);
			
		}
		
	} else {
		removerMarkers(markersDosCheckListsPrevistos, arrayDeCheckListsPrevistos);
	}
	
}


/**
 * Exibe/Oculta os markers de CheckLists Realizados.
 *
 * chk: Componente checkbox que indica se deve-se exibir ou ocultar as 
 * ocorrencias.
 */
function showChecklistsRealizados(chk) {
	 
	getChecklistsRealizados();
	
	if (chk.checked) {
		
		arrayDeCheckListsRealizados = new Array();
		var markersData = document.getElementById("checklistsRealizados").value.split(",");
		
		for (var i = 0; i < markersData.length; i++) {
			
			// FIXME: Não pode mudar (ainda) a ordem das variáveis:
			var _title = markersData[i++];
			var nomeDaAtividade = markersData[i++];
			var _lat = markersData[i++];
			var _lng = markersData[i++];
			var nomeDoEvento = markersData[i++];
			var nomeDoCheckList = markersData[i++];
			var nomeDoStatus = markersData[i++];
			var nomeDoUsuario = markersData[i++];
			var dataHora = markersData[i++];
			
			if( ! (_lat == null || _lat == 'undefined' || _lat == 'null') ) {
				if( ! (_lng == null || _lng == 'undefined' || _lng == 'null') ) {
			
					// FIXME: Trocar os Propertys de Menu pelos Propertys de Label 
					
					var _infoWindowContent = "<div>"
						+ "<h1>" + "#{i18n['label.details']}" + "</h1>"
						+ "<div>"
						+ "<p>"
						+ "<b>#{i18n['label.activity']}:</b>&nbsp;" + nomeDaAtividade + "</br>"
						+ "<b>#{i18n['menu.evento']}:</b>&nbsp;" + nomeDoEvento + "</br>"
						+ "<b>#{i18n['menu.checklist']}:</b>&nbsp;" + nomeDoCheckList + "</br>"
						+ "<b>#{i18n['menu.status']}:</b>&nbsp;" + nomeDoStatus + "</br>"
						+ "<b>#{i18n['menu.usuario']}:</b>&nbsp;" + nomeDoUsuario + "</br>"
						+ "<b>#{i18n['label.date_time']}:</b>&nbsp;" + dataHora + "</br>"
						+ "</p>"
						+ "</br>"
						+ "</div>"
						+ "</div>";
												
					var markerDeCheckListRealizado = new google.maps.Marker({
						draggable: false,
						title: _title,
						animation: google.maps.Animation.DROP,
						html: _infoWindowContent,
						position: new google.maps.LatLng(
								_lat,
								_lng)
					});
								
					arrayDeCheckListsRealizados.push(markerDeCheckListRealizado);
					
					// Monta o InfoWindow:
					google.maps.event.addListener(markerDeCheckListRealizado, 'click', function() {
						infoWindowSingleton.setContent(this.html);
						infoWindowSingleton.open(mainMap, this);
					});
					
				}
			}
			
		}
		
		
		if (arrayDeCheckListsRealizados.length <= 0){
			
			//Click no botão para não Aparecer o Simbolo de que ele foi clicado
			chk.click();
			naoExistemChecklistsRealizados();
			
		} else {
		
			var request = {
				    origin: primeiraLatitudeLongitudePrincipal,
				    destination: ultimaLatitudeLongitudePrincipal
				 };
						
			markersDosCheckListsRealizados.addMarkers(arrayDeCheckListsRealizados);
			
		}
		
		
		
	} else {
		removerMarkers(markersDosCheckListsRealizados, arrayDeCheckListsRealizados);
	}
}

/**
 * Exibe/Oculta a Rota das Operações.
 *
 * chk: Componente checkbox que indica se deve-se exibir ou ocultar as 
 * ocorrencias.
 */
function showRotaDasOperacoes(chk) {
	 
	getCoordenadasDosChecklistsRealizados();
		
	if (chk.checked) {
		var operacao = JSON.parse($("#coordenadasDosChecklistsRealizados").val());
		
		var pontosRota = Operacao.rota.getPath();
		var kmPercorrido = 0;
		var pontoTemp = undefined;
		var latlngbounds = new google.maps.LatLngBounds();

		$.each(operacao.coordenadas, function(i, valor) {
			var ponto = new google.maps.LatLng(valor.latitude, valor.longitude);
			pontosRota.push(ponto);

			if (pontoTemp !== undefined) {
				kmPercorrido += google.maps.geometry.spherical
						.computeDistanceBetween(pontoTemp, ponto);
			}
			
			pontoTemp = ponto;
			
			latlngbounds.extend(ponto);
			mainMap.fitBounds(latlngbounds);
		});			

		if (operacao.coordenadas.length > 0) {
			Operacao.pontoInicio.setPosition(new google.maps.LatLng(
					operacao.coordenadas[0].latitude,
					operacao.coordenadas[0].longitude));

			Operacao.pontoFinal
					.setPosition(new google.maps.LatLng(
							operacao.coordenadas[operacao.coordenadas.length - 1].latitude,
							operacao.coordenadas[operacao.coordenadas.length - 1].longitude));

			var duracao;
			if (operacao.duracao == "Em andamento") {
				duracao = "Em andamento";
			} else {
				duracao = DateUtil.segundosParaHoraCompleta(operacao.duracao);
			}
			var rota = {
					distanciaPercorrida : (kmPercorrido / 1000).toFixed(2)
							+ ' km',
					duracao : duracao,
					inicio : operacao.inicio,
					fim : operacao.fim
			};
			apresentarInformacoesRota(rota);
		}
	} else {
		Operacao.rota.setPath(new Array());
		Operacao.pontoInicio.setPosition(null);
		Operacao.pontoFinal.setPosition(null);
		limparInformacoesRota();
	}
	 
 }

function apresentarInformacoesRota(rota) {
	$('#descricaoViatura').text(rota.descricaoViarura);
	$('#distancia').text(rota.distanciaPercorrida);
	$('#duracao').text(rota.duracao);
	$('#inicio_info').text(rota.inicio);
	$('#fim_info').text(rota.fim);
}
 
 function limparInformacoesRota() {
	$('#descricaoViatura').text('');
	$('#distancia').text('');
	$('#duracao').text('');
	$('#inicio_info').text('');
	$('#fim_info').text('');
}

 var DateUtil = {
			segundosParaHoraCompleta : function(tempo) {
				var hours = Math.floor(tempo / 3600);
				var minutes = Math.floor((tempo % 3600) / 60);
				var seconds = tempo % 60;

				minutes = minutes < 10 ? '0' + minutes : minutes;

				seconds = seconds < 10 ? '0' + seconds : seconds;

				var result = hours + ":" + minutes + ":" + seconds;

				return result;
			}
}

/**
 * 
 * markerClusterer: Um 'MarkerClusterer' que armazena o grupo de Markers.
 * markers: Array de Markers a ser removido do 'MarkerClusterer'.
 */
function popularMarkers(markerClusterer, markers, hiddenData) {
	var markersData = document.getElementById(hiddenData).value.split(",");
	for (var i = 0; i < markersData.length; i++) {
		var _title = markersData[i++];
		var _marker = new google.maps.Marker({
			draggable: false,
			title: _title,
			icon: "data:image/PNG;base64," + markersData[i++],
			position: new google.maps.LatLng(
					markersData[i++],
					markersData[i])
		});
		
		markers.push(_marker);
	}
	
	markerClusterer.addMarkers(markers);
}

/**
 * Remove todos os markers de um 'markerClusterer'.
 *
 * markerClusterer: Um 'MarkerClusterer' que armazena o grupo de Markers.
 * markers: Array de Markers a ser removido do 'MarkerClusterer'.
 */
function removerMarkers(markerClusterer, markers) {
	 	 
	for (var i=0; i < markers.length; i++) {
		markerClusterer.removeMarker(markers[i]);
	}
}

google.maps.event.addDomListener(window, 'load', initialize);

// Trecho que Chama uma Mensagem que verifica se o Checklist ou Evento possuem Latitudes/Longitudes nulas
document.addEventListener('DOMContentLoaded', function() {
	
	getEventoSelecionadoPossuiLatitudeLongitude();
		
	if(eventoSelecionadoPossuiLatitudeLongitude.value == 'false'){
		oEventoSelecionadoNaoPossuiLatitudeLongitude();
	}
	
}, false);


//]]>
		</script>
	
	</ui:define>
	
</ui:composition>